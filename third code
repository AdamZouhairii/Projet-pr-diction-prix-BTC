import datetime
import requests
import json
from requests import Session
import time
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import statsmodels.api as sm

def get_btc_price(session, url, L):
    response = session.get(url)
    data = json.loads(response.text)
    L.append(float(data['price']))

def get_current_time():
    now = datetime.datetime.now()
    return now.strftime("%H:%M:%S")

def get_time_in_seconds(Temps):
    return [((t.hour * 60 + t.minute) * 60 + t.second) for t in Temps]

def calculate_btc_prices(L):
    L3 = []
    for i in range(len(L)):
        L3.append((L[i] - L[i - 1]) / ((i + 1) - i) + L[i] + (L[i]) % 15)
    L4 = []
    for i in range(len(L3)):
        L4.append((L3[i] - L3[i - 1]) / ((i + 1) - i) + (L3[i]) + (L3[i]) % 1)
    return L3, L4

def plot_btc_prices(Temps, L, L3, L4):
    plt.title('Courbe du BTC')
    plt.plot(Temps, L)
    plt.plot(Temps, L3)
    plt.plot(Temps, L4)
    coefs = np.polyfit(Temps, L, 2)
    predictions = np.polyval(coefs, Temps)
    poly_func = np.poly1d(coefs)
    predictions = poly_func(Temps)
    plt.plot(Temps, predictions, color='red')
    plt.show()


def select_arima_order(L, p, q, ic):
    result = sm.tsa.arma_order_select_ic(L, max_ar=p, max_ma=q, ic=ic)
    print(result)  # Ajoutez cette ligne pour imprimer le contenu de result
    order_tuple = result.get("bic_min_order_tuple")
    
    if order_tuple:
        ar_order, ma_order = order_tuple
        intercept = result.get("bic_min_order")[-1]
        return ar_order, ma_order, intercept
    else:
        print("Unable to extract AR, MA orders. Check the structure of the result dictionary.")
        return None, None, None

def fit_arima_model(L, p, d, q):
    model = sm.tsa.ARIMA(L, order=(p, d, q))
    model_fit = model.fit()
    return model_fit

def predict_arima(model_fit, num_predictions):
    predictions = model_fit.get_forecast(steps=num_predictions)
    return predictions.predicted_mean

def main():
    #url = 'https://api3.binance.com/api/v3/ticker/price?symbol=BTCUSDT'
    class = "instrument-price"
     class = "header-info-s"
    session = Session()
    L = []
    Temps = []

    for i in range(100):
        current_time = get_current_time()
        print("il est :", current_time)
        Temps.append(datetime.datetime.strptime(current_time, '%H:%M:%S'))
        print('Et le prix du BTC est:')
        get_btc_price(session, url, L)
        print(L)
        time.sleep(3)

    Temps_in_seconds = get_time_in_seconds(Temps)
    L3, L4 = calculate_btc_prices(L)

    prix_btc = pd.DataFrame({'Prix': L, 'Temps': Temps_in_seconds})
    prix_btc.to_csv('Prix_BTC_Heure.csv', sep='\t')

    plot_btc_prices(Temps_in_seconds, L, L3, L4)

    df = pd.read_csv('Prix_BTC_Heure.csv', sep='\t')
    df = df.dropna()  # Supprimer les lignes avec des valeurs manquantes

    # Ajouter ici le code pour choisir les ordres p, d, q pour ARIMA (par exemple, avec ACF et PACF)

    p, d, q = 1, 1, 1  # Remplacez ces valeurs par celles que vous choisissez

    model_fit = fit_arima_model(df['Prix'], p, d, q)

    num_predictions = 10
    predictions = predict_arima(model_fit, num_predictions)
    print(predictions)

if __name__ == '__main__':
    main() 
