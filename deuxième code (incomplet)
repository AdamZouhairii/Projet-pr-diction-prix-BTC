import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
from statsmodels.tsa.arima_model import ARIMA

def load_data(file_name):
    return pd.read_csv(file_name)

def calculate_derivatives(df):
    df["derivée"] = np.gradient(df["Prix"])
    df["derivée_seconde"] = np.gradient(df["derivée"])
    return df

def plot_btc_prices(df):
    plt.title('Courbe du BTC')
    plt.plot(df['time'], df['price'])
    plt.plot(df['time'], df['derivée'])
    plt.plot(df['time'], df['derivée_seconde'])
    plt.show()

def select_arima_order(df, p, q, ic):
    ar_coeffs, ma_coeffs, intercep = sm.tsa.arma_order_select_ic(df["price"], max_ar=p, max_ma=q, ic=ic)
    return ar_coeffs, ma_coeffs, intercep

def fit_arima_model(df, p, d, q):
    model = ARIMA(df["price"], order=(p,d,q))
    model_fit = model.fit(disp=False)
    return model_fit

def predict_arima(model_fit, num_predictions):
    predictions = model_fit.predict(start=len(model_fit.fittedvalues), end=len(model_fit.fittedvalues)+num_predictions-1, dynamic=False)
    return predictions

def main():
    file_name = 'Prix BTC + Heure.csv'
    p = 1
    d = 1
    q = 1
    ic = 'aic'
    num_predictions = 10

    df = load_data(file_name)
    df = calculate_derivatives(df)
    plot_btc_prices(df)

    ar_coeffs, ma_coeffs, intercep = select_arima_order(df, p, q, ic)
    print("AR coefficients:", ar_coeffs)
    print("MA coefficients:", ma_coeffs)
    print("Intercept:", intercep)

    model_fit = fit_arima_model(df, p, d, q)

    predictions = predict_arima(model_fit, num_predictions)
    print(predictions)

if __name__ == '__main__':
    main()
