import datetime
import requests
import json
from requests import Session
import time
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np


def get_btc_price(session, url, L):
    response = session.get(url)
    data = json.loads(response.text)
    L.append(float(data['price']))


def get_current_time():
    now = datetime.datetime.now()
    return now.strftime("%H:%M:%S")


def get_time_in_seconds(Temps):
    return [((t.hour * 60 + t.minute) * 60 + t.second) for t in Temps]


def calculate_btc_prices(L):
    L3 = []
    for i in range(1, len(L)):
        L3.append((L[i] - L[i - 1]) / ((i + 1) - i) + L[i] + (L[i]) % 15)
    L4 = []
    for i in range(1, len(L3)):
        L4.append((L3[i] - L3[i - 1]) / ((i + 1) - i) + (L3[i]) + (L3[i]) % 1)
    return L3, L4


def plot_btc_prices(Temps, L, L3, L4):
    plt.title('Courbe du BTC')
    plt.plot(Temps, L)
    plt.plot(Temps[1:], L3)
    plt.plot(Temps[2:], L4)
    coefs = np.polyfit(Temps, L, 2)
    predictions = np.polyval(coefs, Temps)
    poly_func = np.poly1d(coefs)
    predictions = poly_func(Temps)
    plt.plot(Temps, predictions, color='red')
    plt.show()


def moyenne_prix_entre_temps(debut, fin, df):
    debut_dt = datetime.datetime.strptime(debut, '%H:%M:%S')
    fin_dt = datetime.datetime.strptime(fin, '%H:%M:%S')
    debut_sec = (debut_dt - datetime.datetime(1900, 1, 1)).total_seconds()
    fin_sec = (fin_dt - datetime.datetime(1900, 1, 1)).total_seconds()
    df_selection = df.loc[(df['Temps'] >= debut_sec) & (df['Temps'] <= fin_sec)]
    moyenne_prix = df_selection['Prix'].mean()
    return moyenne_prix


def decider_achat_vente(prix_btc, moyenne_entre_temps, periode_courte=10, periode_longue=30):
    moyenne_mobile_courte = prix_btc['Prix'].rolling(window=periode_courte).mean()
    moyenne_mobile_longue = prix_btc['Prix'].rolling(window=periode_longue).mean()
    if moyenne_mobile_courte.iloc[-1] > moyenne_mobile_longue.iloc[-1] and prix_btc['Prix'].iloc[-1] < moyenne_entre_temps:
        return abs(1)
    elif moyenne_mobile_courte.iloc[-1] < moyenne_mobile_longue.iloc[-1] and prix_btc['Prix'].iloc[-1] > moyenne_entre_temps:
        return abs(-1)
    else:
        return 0


def main():
    url = 'https://api3.binance.com/api/v3/ticker/price?symbol=BTCUSDT'
    session = Session()
    L = []
    Temps = []
    for i in range(10):
        current_time = get_current_time()
        print("il est :", current_time)
        Temps.append(datetime.datetime.strptime(current_time, '%H:%M:%S'))
        print('Et le prix du BTC est:')
        get_btc_price(session, url, L)
        print(L)
        time.sleep(3)

    Temps_in_seconds = get_time_in_seconds(Temps)
    L3, L4 = calculate_btc_prices(L)

    prix_btc = pd.DataFrame({'Prix': L, 'Temps': Temps_in_seconds})
    prix_btc.to_csv('Prix BTC + Heure', sep='\t')

    plot_btc_prices(Temps_in_seconds, L, L3, L4)
    
    debut = '00:00:00'
    fin = '23:00:00'
    moyenne_entre_temps = moyenne_prix_entre_temps(debut, fin, prix_btc)
    print(f"La moyenne des prix entre {debut} et {fin} est {moyenne_entre_temps}")
    quantite = decider_achat_vente(prix_btc, moyenne_entre_temps)
    if quantite > 0:
        print(f"Je vous conseille d'acheter {quantite:.3f} BTC.")
    elif quantite < 0:
        print(f"Je vous conseille de vendre {abs(quantite):.3f} BTC.")
    else:
        print("Je ne vous conseille ni d'acheter ni de vendre pour le moment.")

if __name__ == '__main__':
    main()
